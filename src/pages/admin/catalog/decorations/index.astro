---
import AdminLayout from '@/layouts/AdminLayout.astro';
import { getAdminAuth, requireAdmin } from '@/lib/auth';
import { createSupabaseClient } from '@/lib/supabase';

const auth = await getAdminAuth(Astro);
const user = requireAdmin(auth);

if (!user) {
  return Astro.redirect('/auth/login?redirect=/admin/catalog/decorations');
}

const supabase = createSupabaseClient(Astro);

// Get providers for filters
const { data: providers } = await supabase
  .from('providers')
  .select('id, company_name')
  .eq('category_type', 'fabricantes')
  .eq('status', 'active')
  .order('company_name');

// Get categories for filters  
const { data: categories } = await supabase
  .from('categories')
  .select('id, name')
  .eq('is_active', true)
  .order('name');

// Get initial decorations data (first page) - decorations are services with decoration/improvement types
const { data: decorations, count } = await supabase
  .from('services')
  .select(`
    *,
    provider:providers(id, company_name, logo_url),
    category:categories(id, name)
  `)
  .ilike('service_type', '%decoración%')
  .or('service_type.ilike.%mejoras%,service_type.ilike.%diseño%,service_type.ilike.%interiorismo%')
  .order('created_at', { ascending: false })
  .range(0, 49); // First 50 items

// Get service types for filters (treating them as product types)
const productTypes = [...new Set(decorations?.map(d => d.service_type).filter(Boolean))].sort();

// Services don't have brands, so we'll use providers' names
const brands = [...new Set(decorations?.map(d => d.provider?.company_name).filter(Boolean))].sort();

const totalCount = count || 0;
---

<AdminLayout title="Decoración y Mejoras" user={user} currentPage="/admin/catalog/decorations">
  <div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">Decoración y Mejoras</h1>
          <p class="mt-1 text-sm text-gray-500">
            Gestión de productos y servicios de decoración - {totalCount} elementos total
          </p>
        </div>
        <div class="flex space-x-3">
          <button
            onclick="downloadTemplate()"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Descargar Plantilla
          </button>
          <button
            onclick="showImportModal()"
            class="inline-flex items-center px-4 py-2 border border-blue-300 rounded-md shadow-sm text-sm font-medium text-blue-700 bg-blue-50 hover:bg-blue-100"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            Importar CSV
          </button>
          <a
            href="/admin/catalog/decorations/create"
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Nueva Decoración
          </a>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-white shadow rounded-lg mb-6">
      <div class="px-6 py-4">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Fabricante</label>
            <select id="providerFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Todos los fabricantes</option>
              {providers?.map(provider => (
                <option value={provider.id}>{provider.company_name}</option>
              ))}
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
            <select id="categoryFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Todas las categorías</option>
              {categories?.map(category => (
                <option value={category.id}>{category.name}</option>
              ))}
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Tipo de Producto</label>
            <select id="productTypeFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Todos los tipos</option>
              {productTypes.map(type => (
                <option value={type}>{type}</option>
              ))}
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Marca</label>
            <select id="brandFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Todas las marcas</option>
              {brands.map(brand => (
                <option value={brand}>{brand}</option>
              ))}
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Estado</label>
            <select id="statusFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Todos los estados</option>
              <option value="draft">Borrador</option>
              <option value="pending_review">Pendiente Revisión</option>
              <option value="active">Activo</option>
              <option value="inactive">Inactivo</option>
              <option value="rejected">Rechazado</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Stock</label>
            <select id="stockFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Todos</option>
              <option value="in_stock">En Stock</option>
              <option value="low_stock">Stock Bajo</option>
              <option value="out_of_stock">Sin Stock</option>
              <option value="discontinued">Descontinuado</option>
            </select>
          </div>
        </div>
        
        <div class="mt-4 flex justify-between">
          <div class="flex space-x-2">
            <button
              onclick="applyFilters()"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
              </svg>
              Filtrar
            </button>
            <button
              onclick="clearFilters()"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Limpiar
            </button>
          </div>
          
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-500">Por página:</span>
            <select id="pageSizeSelect" class="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="25">25</option>
              <option value="50" selected>50</option>
              <option value="100">100</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Bulk Actions -->
    <div id="bulkActions" class="hidden bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <span class="text-sm font-medium text-blue-700">
            <span id="selectedCount">0</span> decoraciones seleccionadas
          </span>
          <div class="flex space-x-2">
            <select id="bulkStatusSelect" class="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Cambiar estado...</option>
              <option value="active">Activar</option>
              <option value="inactive">Desactivar</option>
              <option value="draft">Marcar como Borrador</option>
              <option value="pending_review">Enviar a Revisión</option>
            </select>
            <button
              onclick="bulkUpdateStatus()"
              class="inline-flex items-center px-3 py-1.5 border border-blue-300 rounded text-sm font-medium text-blue-700 bg-white hover:bg-blue-50"
            >
              Aplicar Estado
            </button>
          </div>
          <div class="flex space-x-2">
            <select id="bulkTierSelect" class="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
              <option value="">Cambiar tier...</option>
              <option value="standard">Standard</option>
              <option value="destacado">Destacado</option>
              <option value="premium">Premium</option>
            </select>
            <button
              onclick="bulkUpdateTier()"
              class="inline-flex items-center px-3 py-1.5 border border-blue-300 rounded text-sm font-medium text-blue-700 bg-white hover:bg-blue-50"
            >
              Aplicar Tier
            </button>
          </div>
          <button
            onclick="bulkUpdateStock()"
            class="inline-flex items-center px-3 py-1.5 border border-green-300 rounded text-sm font-medium text-green-700 bg-white hover:bg-green-50"
          >
            Actualizar Stock
          </button>
        </div>
        <button
          onclick="clearSelection()"
          class="text-blue-600 hover:text-blue-800 text-sm font-medium"
        >
          Limpiar selección
        </button>
      </div>
    </div>

    <!-- Data Table -->
    <div class="bg-white shadow rounded-lg overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <input
                  type="checkbox"
                  id="selectAll"
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  onchange="toggleSelectAll(this)"
                />
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Producto
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fabricante
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tipo/Categoría
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Precio
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cobertura
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tier
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody id="decorationsTableBody" class="bg-white divide-y divide-gray-200">
            {decorations?.map(decoration => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <input
                    type="checkbox"
                    class="decoration-checkbox h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    value={decoration.id}
                    onchange="updateSelection()"
                  />
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-12 w-12">
                      <img
                        class="h-12 w-12 rounded-lg object-cover"
                        src={decoration.main_image_url || '/images/placeholder-product.png'}
                        alt={decoration.name}
                        onerror="this.src='/images/placeholder-product.png'"
                      />
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900">
                        {decoration.name}
                      </div>
                      <div class="text-sm text-gray-500">
                        Tipo: {decoration.service_type || 'N/A'}
                        {decoration.price_unit && ` • ${decoration.price_unit}`}
                      </div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    {decoration.provider?.logo_url && (
                      <img
                        class="h-6 w-6 rounded-full mr-2 object-cover"
                        src={decoration.provider.logo_url}
                        alt={decoration.provider.company_name}
                        onerror="this.style.display='none'"
                      />
                    )}
                    <div class="text-sm text-gray-900">
                      {decoration.provider?.company_name || 'Sin fabricante'}
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">{decoration.service_type || 'N/A'}</div>
                  <div class="text-sm text-gray-500">{decoration.category?.name || 'Sin categoría'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">
                    {decoration.price_from && decoration.price_to ? 
                      `$${decoration.price_from.toLocaleString('es-CL')} - $${decoration.price_to.toLocaleString('es-CL')}` :
                      decoration.price_from ? 
                        `Desde $${decoration.price_from.toLocaleString('es-CL')}` : 
                        'Precio por cotizar'}
                  </div>
                  {decoration.price_unit && (
                    <div class="text-sm text-gray-500">
                      {decoration.price_unit === 'per_m2' ? 'Por m²' :
                       decoration.price_unit === 'per_project' ? 'Por proyecto' :
                       decoration.price_unit === 'per_hour' ? 'Por hora' : decoration.price_unit}
                    </div>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">
                    {decoration.coverage_areas?.length ? 
                      decoration.coverage_areas.slice(0, 2).join(', ') + 
                      (decoration.coverage_areas.length > 2 ? '...' : '') : 
                      'Consultar cobertura'}
                  </div>
                  <div class="text-sm text-gray-500">
                    {decoration.coverage_areas?.length || 0} área{decoration.coverage_areas?.length !== 1 ? 's' : ''}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    decoration.status === 'active' ? 'bg-green-100 text-green-800' :
                    decoration.status === 'pending_review' ? 'bg-yellow-100 text-yellow-800' :
                    decoration.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                    decoration.status === 'inactive' ? 'bg-red-100 text-red-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {decoration.status === 'active' ? 'Activo' :
                     decoration.status === 'pending_review' ? 'Pendiente' :
                     decoration.status === 'draft' ? 'Borrador' :
                     decoration.status === 'inactive' ? 'Inactivo' :
                     decoration.status === 'rejected' ? 'Rechazado' :
                     'Desconocido'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    decoration.tier === 'premium' ? 'bg-purple-100 text-purple-800' :
                    decoration.tier === 'destacado' ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {decoration.tier === 'premium' ? 'Premium' :
                     decoration.tier === 'destacado' ? 'Destacado' :
                     'Standard'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex items-center justify-end space-x-2">
                    <a
                      href={`/servicios/${decoration.slug}`}
                      target="_blank"
                      class="text-blue-600 hover:text-blue-900"
                      title="Ver público"
                    >
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                    </a>
                    <a
                      href={`/admin/catalog/services/${decoration.id}/edit`}
                      class="text-indigo-600 hover:text-indigo-900"
                      title="Editar"
                    >
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </a>
                    <button
                      onclick={`duplicateDecoration('${decoration.id}')`}
                      class="text-green-600 hover:text-green-900"
                      title="Duplicar"
                    >
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </button>
                    <button
                      onclick={`deleteDecoration('${decoration.id}', '${decoration.name}')`}
                      class="text-red-600 hover:text-red-900"
                      title="Eliminar"
                    >
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <!-- Pagination -->
      <div class="bg-white px-6 py-3 flex items-center justify-between border-t border-gray-200">
        <div class="flex-1 flex justify-between sm:hidden">
          <button
            id="prevPageMobile"
            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Anterior
          </button>
          <button
            id="nextPageMobile"
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Siguiente
          </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p class="text-sm text-gray-700">
              Mostrando <span id="showingFrom">1</span> a <span id="showingTo">50</span> de 
              <span id="totalItems">{totalCount}</span> resultados
            </p>
          </div>
          <div>
            <nav id="pagination" class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <!-- Pagination buttons will be generated by JavaScript -->
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Import Modal -->
  <div id="importModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Importar Decoraciones desde CSV</h3>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Archivo CSV
          </label>
          <input
            type="file"
            id="csvFileInput"
            accept=".csv"
            class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          />
        </div>
        <div class="flex justify-end space-x-3">
          <button
            onclick="hideImportModal()"
            class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400"
          >
            Cancelar
          </button>
          <button
            onclick="importDecorations()"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Importar
          </button>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    let currentPage = 1;
    let currentFilters = {};
    let selectedDecorations = new Set();

    // Filter functions
    function applyFilters() {
      currentFilters = {
        provider_id: document.getElementById('providerFilter').value,
        category_id: document.getElementById('categoryFilter').value,
        product_type: document.getElementById('productTypeFilter').value,
        brand: document.getElementById('brandFilter').value,
        status: document.getElementById('statusFilter').value,
        stock_status: document.getElementById('stockFilter').value
      };
      currentPage = 1;
      loadDecorations();
    }

    function clearFilters() {
      document.getElementById('providerFilter').value = '';
      document.getElementById('categoryFilter').value = '';
      document.getElementById('productTypeFilter').value = '';
      document.getElementById('brandFilter').value = '';
      document.getElementById('statusFilter').value = '';
      document.getElementById('stockFilter').value = '';
      currentFilters = {};
      currentPage = 1;
      loadDecorations();
    }

    // Load decorations data
    async function loadDecorations() {
      try {
        const pageSize = parseInt(document.getElementById('pageSizeSelect').value);
        const params = new URLSearchParams({
          page: currentPage,
          limit: pageSize,
          ...currentFilters
        });

        const response = await fetch(`/api/admin/services?${params}&service_type_filter=decoration`);
        if (response.ok) {
          const data = await response.json();
          updateTable(data.decorations);
          updatePagination(data.pagination);
        } else {
          console.error('Error loading decorations');
        }
      } catch (error) {
        console.error('Error:', error);
      }
    }

    function updateTable(decorations) {
      const tbody = document.getElementById('decorationsTableBody');
      tbody.innerHTML = decorations.map(decoration => `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap">
            <input
              type="checkbox"
              class="decoration-checkbox h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              value="${decoration.id}"
              onchange="updateSelection()"
            />
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div class="flex-shrink-0 h-12 w-12">
                <img
                  class="h-12 w-12 rounded-lg object-cover"
                  src="${decoration.main_image_url || '/images/placeholder-product.png'}"
                  alt="${decoration.name}"
                  onerror="this.src='/images/placeholder-product.png'"
                />
              </div>
              <div class="ml-4">
                <div class="text-sm font-medium text-gray-900">
                  ${decoration.name}
                </div>
                <div class="text-sm text-gray-500">
                  SKU: ${decoration.sku || 'N/A'}
                  ${decoration.brand ? ` • ${decoration.brand}` : ''}
                  ${decoration.model ? ` • ${decoration.model}` : ''}
                </div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              ${decoration.provider?.logo_url ? `
                <img
                  class="h-6 w-6 rounded-full mr-2 object-cover"
                  src="${decoration.provider.logo_url}"
                  alt="${decoration.provider.company_name}"
                  onerror="this.style.display='none'"
                />
              ` : ''}
              <div class="text-sm text-gray-900">
                ${decoration.provider?.company_name || 'Sin fabricante'}
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">${decoration.product_type || 'N/A'}</div>
            <div class="text-sm text-gray-500">${decoration.category?.name || 'Sin categoría'}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">
              ${decoration.price ? `$${decoration.price.toLocaleString('es-CL')}` : 'N/A'}
            </div>
            ${decoration.price_wholesale ? `
              <div class="text-sm text-gray-500">
                Mayorista: $${decoration.price_wholesale.toLocaleString('es-CL')}
              </div>
            ` : ''}
            ${decoration.discount_percentage && decoration.discount_percentage > 0 ? `
              <div class="text-xs text-red-600">
                -${decoration.discount_percentage}% dcto.
              </div>
            ` : ''}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">
              ${decoration.stock_quantity || 0} unidades
            </div>
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStockStatusClass(decoration.stock_status)}">
              ${getStockStatusText(decoration.stock_status)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusClass(decoration.status)}">
              ${getStatusText(decoration.status)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getTierClass(decoration.tier)}">
              ${getTierText(decoration.tier)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <div class="flex items-center justify-end space-x-2">
              <a
                href="/decoraciones/${decoration.slug}"
                target="_blank"
                class="text-blue-600 hover:text-blue-900"
                title="Ver público"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              </a>
              <a
                href="/admin/catalog/decorations/${decoration.id}/edit"
                class="text-indigo-600 hover:text-indigo-900"
                title="Editar"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </a>
              <button
                onclick="duplicateDecoration('${decoration.id}')"
                class="text-green-600 hover:text-green-900"
                title="Duplicar"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
              </button>
              <button
                onclick="deleteDecoration('${decoration.id}', '${decoration.name}')"
                class="text-red-600 hover:text-red-900"
                title="Eliminar"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </td>
        </tr>
      `).join('');
    }

    // Helper functions for status display
    function getStockStatusClass(status) {
      const classes = {
        in_stock: 'bg-green-100 text-green-800',
        low_stock: 'bg-yellow-100 text-yellow-800',
        out_of_stock: 'bg-red-100 text-red-800',
        discontinued: 'bg-gray-100 text-gray-800'
      };
      return classes[status] || 'bg-gray-100 text-gray-800';
    }

    function getStockStatusText(status) {
      const texts = {
        in_stock: 'En Stock',
        low_stock: 'Stock Bajo',
        out_of_stock: 'Sin Stock',
        discontinued: 'Descontinuado'
      };
      return texts[status] || 'Desconocido';
    }

    function getStatusClass(status) {
      const classes = {
        active: 'bg-green-100 text-green-800',
        pending_review: 'bg-yellow-100 text-yellow-800',
        draft: 'bg-gray-100 text-gray-800',
        inactive: 'bg-red-100 text-red-800',
        rejected: 'bg-red-100 text-red-800'
      };
      return classes[status] || 'bg-gray-100 text-gray-800';
    }

    function getStatusText(status) {
      const texts = {
        active: 'Activo',
        pending_review: 'Pendiente',
        draft: 'Borrador',
        inactive: 'Inactivo',
        rejected: 'Rechazado'
      };
      return texts[status] || 'Desconocido';
    }

    function getTierClass(tier) {
      const classes = {
        premium: 'bg-purple-100 text-purple-800',
        destacado: 'bg-blue-100 text-blue-800',
        standard: 'bg-gray-100 text-gray-800'
      };
      return classes[tier] || 'bg-gray-100 text-gray-800';
    }

    function getTierText(tier) {
      const texts = {
        premium: 'Premium',
        destacado: 'Destacado',
        standard: 'Standard'
      };
      return texts[tier] || 'Standard';
    }

    // Selection functions
    function toggleSelectAll(checkbox) {
      const checkboxes = document.querySelectorAll('.decoration-checkbox');
      checkboxes.forEach(cb => {
        cb.checked = checkbox.checked;
        if (checkbox.checked) {
          selectedDecorations.add(cb.value);
        } else {
          selectedDecorations.delete(cb.value);
        }
      });
      updateSelection();
    }

    function updateSelection() {
      selectedDecorations.clear();
      document.querySelectorAll('.decoration-checkbox:checked').forEach(cb => {
        selectedDecorations.add(cb.value);
      });
      
      const bulkActions = document.getElementById('bulkActions');
      const selectedCount = document.getElementById('selectedCount');
      
      if (selectedDecorations.size > 0) {
        bulkActions.classList.remove('hidden');
        selectedCount.textContent = selectedDecorations.size;
      } else {
        bulkActions.classList.add('hidden');
      }
    }

    function clearSelection() {
      selectedDecorations.clear();
      document.querySelectorAll('.decoration-checkbox').forEach(cb => cb.checked = false);
      document.getElementById('selectAll').checked = false;
      document.getElementById('bulkActions').classList.add('hidden');
    }

    // Bulk operations
    async function bulkUpdateStatus() {
      const status = document.getElementById('bulkStatusSelect').value;
      if (!status || selectedDecorations.size === 0) return;

      if (confirm(`¿Está seguro de cambiar el estado a "${status}" para ${selectedDecorations.size} decoraciones?`)) {
        try {
          const response = await fetch('/api/admin/decorations', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ids: Array.from(selectedDecorations),
              action: 'update_status',
              status
            })
          });

          if (response.ok) {
            loadDecorations();
            clearSelection();
          } else {
            alert('Error al actualizar el estado');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al actualizar el estado');
        }
      }
    }

    async function bulkUpdateTier() {
      const tier = document.getElementById('bulkTierSelect').value;
      if (!tier || selectedDecorations.size === 0) return;

      if (confirm(`¿Está seguro de cambiar el tier a "${tier}" para ${selectedDecorations.size} decoraciones?`)) {
        try {
          const response = await fetch('/api/admin/decorations', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ids: Array.from(selectedDecorations),
              action: 'update_tier',
              tier
            })
          });

          if (response.ok) {
            loadDecorations();
            clearSelection();
          } else {
            alert('Error al actualizar el tier');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al actualizar el tier');
        }
      }
    }

    async function bulkUpdateStock() {
      const stockQuantity = prompt('Ingrese la cantidad de stock:');
      if (stockQuantity === null || selectedDecorations.size === 0) return;

      const quantity = parseInt(stockQuantity);
      if (isNaN(quantity) || quantity < 0) {
        alert('Ingrese una cantidad válida');
        return;
      }

      if (confirm(`¿Está seguro de actualizar el stock a ${quantity} para ${selectedDecorations.size} decoraciones?`)) {
        try {
          const response = await fetch('/api/admin/decorations', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ids: Array.from(selectedDecorations),
              action: 'update_stock',
              stock_quantity: quantity
            })
          });

          if (response.ok) {
            loadDecorations();
            clearSelection();
          } else {
            alert('Error al actualizar el stock');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al actualizar el stock');
        }
      }
    }

    // Individual operations
    async function duplicateDecoration(id) {
      if (confirm('¿Está seguro de duplicar esta decoración?')) {
        try {
          const response = await fetch(`/api/admin/decorations/${id}/duplicate`, {
            method: 'POST'
          });

          if (response.ok) {
            const result = await response.json();
            window.location.href = `/admin/catalog/decorations/${result.decoration.id}/edit`;
          } else {
            alert('Error al duplicar la decoración');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al duplicar la decoración');
        }
      }
    }

    async function deleteDecoration(id, name) {
      if (confirm(`¿Está seguro de eliminar la decoración "${name}"?`)) {
        try {
          const response = await fetch(`/api/admin/decorations/${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            loadDecorations();
          } else {
            alert('Error al eliminar la decoración');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al eliminar la decoración');
        }
      }
    }

    // Import/Export functions
    async function downloadTemplate() {
      try {
        const response = await fetch('/api/admin/decorations/import');
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'decorations_template.csv';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        a.remove();
      } catch (error) {
        console.error('Error downloading template:', error);
        alert('Error al descargar la plantilla');
      }
    }

    function showImportModal() {
      document.getElementById('importModal').classList.remove('hidden');
    }

    function hideImportModal() {
      document.getElementById('importModal').classList.add('hidden');
      document.getElementById('csvFileInput').value = '';
    }

    async function importDecorations() {
      const fileInput = document.getElementById('csvFileInput');
      const file = fileInput.files[0];

      if (!file) {
        alert('Por favor seleccione un archivo CSV');
        return;
      }

      try {
        const text = await file.text();
        const lines = text.trim().split('\n');
        const headers = lines[0].split(',');
        const importData = [];

        for (let i = 1; i < lines.length; i++) {
          const values = lines[i].split(',');
          const row = {};
          headers.forEach((header, index) => {
            row[header.trim()] = values[index]?.trim() || '';
          });
          importData.push(row);
        }

        const response = await fetch('/api/admin/decorations/import', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ data: importData })
        });

        if (response.ok) {
          const result = await response.json();
          alert(`Importación completada. ${result.successfulRows} filas exitosas, ${result.failedRows} fallidas.`);
          hideImportModal();
          loadDecorations();
        } else {
          const error = await response.json();
          alert(`Error en la importación: ${error.error}`);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al procesar el archivo CSV');
      }
    }

    // Pagination
    function updatePagination(pagination) {
      document.getElementById('showingFrom').textContent = pagination.from;
      document.getElementById('showingTo').textContent = pagination.to;
      document.getElementById('totalItems').textContent = pagination.total;

      // Update pagination controls
      const paginationContainer = document.getElementById('pagination');
      paginationContainer.innerHTML = '';

      // Previous button
      const prevButton = document.createElement('button');
      prevButton.innerHTML = 'Anterior';
      prevButton.className = `relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
        pagination.currentPage <= 1 ? 'text-gray-300 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50'
      }`;
      prevButton.disabled = pagination.currentPage <= 1;
      prevButton.onclick = () => {
        if (currentPage > 1) {
          currentPage--;
          loadDecorations();
        }
      };
      paginationContainer.appendChild(prevButton);

      // Page numbers
      const maxVisiblePages = 5;
      let startPage = Math.max(1, pagination.currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(pagination.totalPages, startPage + maxVisiblePages - 1);

      if (endPage - startPage < maxVisiblePages - 1) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }

      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.innerHTML = i.toString();
        pageButton.className = `relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
          i === pagination.currentPage
            ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
        }`;
        pageButton.onclick = () => {
          currentPage = i;
          loadDecorations();
        };
        paginationContainer.appendChild(pageButton);
      }

      // Next button
      const nextButton = document.createElement('button');
      nextButton.innerHTML = 'Siguiente';
      nextButton.className = `relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
        pagination.currentPage >= pagination.totalPages ? 'text-gray-300 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50'
      }`;
      nextButton.disabled = pagination.currentPage >= pagination.totalPages;
      nextButton.onclick = () => {
        if (currentPage < pagination.totalPages) {
          currentPage++;
          loadDecorations();
        }
      };
      paginationContainer.appendChild(nextButton);
    }

    // Event listeners
    document.getElementById('pageSizeSelect').addEventListener('change', () => {
      currentPage = 1;
      loadDecorations();
    });

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      loadDecorations();
    });
  </script>
</AdminLayout>