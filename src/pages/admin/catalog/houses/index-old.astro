---
import AdminLayout from '@/layouts/AdminLayout.astro';
import { getAdminAuth, requireAdmin } from '@/lib/auth';
import { createSupabaseClient } from '@/lib/supabase';

const auth = await getAdminAuth(Astro);
const user = requireAdmin(auth);

if (!user) {
  return Astro.redirect('/auth/login?redirect=/admin/catalog/houses');
}

const supabase = createSupabaseClient(Astro);

// Get all houses with provider info
const { data: houses } = await supabase
  .from('houses')
  .select(`
    *,
    provider:providers(company_name, slug),
    topology:house_topologies(code, bedrooms, bathrooms)
  `)
  .order('created_at', { ascending: false });

// Get providers for filter
const { data: providers } = await supabase
  .from('providers')
  .select('id, company_name')
  .eq('category_type', 'fabricantes')
  .order('company_name');

// Get topologies for filter
const { data: topologies } = await supabase
  .from('house_topologies')
  .select('*')
  .order('display_order');
---

<AdminLayout title="Catálogo de Casas" user={user}>
  <div class="space-y-6">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
      <div class="px-6 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Catálogo de Casas</h1>
            <p class="mt-1 text-sm text-gray-500">
              Gestiona el catálogo completo de casas modulares y prefabricadas
            </p>
          </div>
          <div class="flex items-center space-x-3">
            <button
              onclick="openBulkImport()"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
              Importar CSV
            </button>
            <a
              href="/admin/catalog/houses/create"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
              Nueva Casa
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow p-4">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Buscar</label>
          <input
            type="text"
            id="searchInput"
            placeholder="Nombre, SKU, descripción..."
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700">Fabricante</label>
          <select
            id="providerFilter"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="">Todos</option>
            {providers?.map(provider => (
              <option value={provider.id}>{provider.company_name}</option>
            ))}
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700">Topología</label>
          <select
            id="topologyFilter"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="">Todas</option>
            {topologies?.map(topology => (
              <option value={topology.id}>{topology.code} - {topology.description}</option>
            ))}
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700">Estado</label>
          <select
            id="statusFilter"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
          >
            <option value="">Todos</option>
            <option value="active">Activo</option>
            <option value="inactive">Inactivo</option>
            <option value="draft">Borrador</option>
            <option value="pending_review">Pendiente Revisión</option>
          </select>
        </div>
      </div>
      
      <div class="mt-4 flex items-center justify-between">
        <div class="flex items-center space-x-2">
          <button
            onclick="applyFilters()"
            class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded text-white bg-blue-600 hover:bg-blue-700"
          >
            Aplicar Filtros
          </button>
          <button
            onclick="clearFilters()"
            class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
          >
            Limpiar
          </button>
        </div>
        
        <div class="text-sm text-gray-500">
          {houses?.length || 0} casas encontradas
        </div>
      </div>
    </div>

    <!-- Data Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="w-12 px-6 py-3">
                <input type="checkbox" id="selectAll" class="rounded border-gray-300" />
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Imagen
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Casa
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Fabricante
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Topología
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Precio
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Stock
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tier
              </th>
              <th scope="col" class="relative px-6 py-3">
                <span class="sr-only">Acciones</span>
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {houses?.map((house) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4">
                  <input type="checkbox" value={house.id} class="rounded border-gray-300 house-checkbox" />
                </td>
                <td class="px-6 py-4">
                  {house.main_image_url ? (
                    <img 
                      src={house.main_image_url} 
                      alt={house.name}
                      class="h-12 w-12 rounded-lg object-cover"
                    />
                  ) : (
                    <div class="h-12 w-12 rounded-lg bg-gray-200 flex items-center justify-center">
                      <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                  )}
                </td>
                <td class="px-6 py-4">
                  <div>
                    <div class="text-sm font-medium text-gray-900">{house.name}</div>
                    <div class="text-sm text-gray-500">Modelo: {house.model_code || 'N/A'}</div>
                    <div class="text-sm text-gray-500">{house.area_m2}m²</div>
                  </div>
                </td>
                <td class="px-6 py-4 text-sm text-gray-900">
                  {house.provider?.company_name || 'Sin asignar'}
                </td>
                <td class="px-6 py-4 text-sm text-gray-900">
                  {house.topology?.code || 'N/A'}
                </td>
                <td class="px-6 py-4">
                  <div class="text-sm font-medium text-gray-900">
                    ${house.price?.toLocaleString('es-CL') || '0'}
                  </div>
                  {house.price_per_m2 && (
                    <div class="text-xs text-gray-500">
                      ${house.price_per_m2.toLocaleString('es-CL')}/m²
                    </div>
                  )}
                </td>
                <td class="px-6 py-4">
                  <div class="flex items-center">
                    <span class="inline-flex px-2 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                      N/A
                    </span>
                  </div>
                </td>
                <td class="px-6 py-4">
                  <span class={`inline-flex px-2 text-xs font-semibold rounded-full ${
                    house.status === 'active' ? 'bg-green-100 text-green-800' :
                    house.status === 'inactive' ? 'bg-gray-100 text-gray-800' :
                    house.status === 'draft' ? 'bg-yellow-100 text-yellow-800' :
                    house.status === 'pending_review' ? 'bg-blue-100 text-blue-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {house.status}
                  </span>
                </td>
                <td class="px-6 py-4">
                  <span class={`inline-flex px-2 text-xs font-semibold rounded-full ${
                    house.tier === 'premium' ? 'bg-purple-100 text-purple-800' :
                    house.tier === 'destacado' ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {house.tier}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex items-center justify-end space-x-2">
                    <a
                      href={`/casas/${house.slug}`}
                      target="_blank"
                      class="text-gray-400 hover:text-gray-500"
                      title="Ver en sitio"
                    >
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                    </a>
                    <a
                      href={`/admin/catalog/houses/${house.id}/edit`}
                      class="text-blue-600 hover:text-blue-900"
                      title="Editar"
                    >
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </a>
                    <button
                      onclick={`duplicateHouse('${house.id}')`}
                      class="text-gray-400 hover:text-gray-500"
                      title="Duplicar"
                    >
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2" />
                      </svg>
                    </button>
                    <button
                      onclick={`deleteHouse('${house.id}')`}
                      class="text-red-600 hover:text-red-900"
                      title="Eliminar"
                    >
                      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <div class="px-6 py-4 border-t border-gray-200">
        <div class="flex items-center justify-between">
          <div class="text-sm text-gray-700">
            Mostrando <span class="font-medium">1</span> a <span class="font-medium">10</span> de{' '}
            <span class="font-medium">{houses?.length || 0}</span> resultados
          </div>
          <div class="flex items-center space-x-2">
            <button class="px-3 py-1 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              Anterior
            </button>
            <button class="px-3 py-1 border border-blue-600 rounded-md text-sm font-medium text-white bg-blue-600">
              1
            </button>
            <button class="px-3 py-1 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              2
            </button>
            <button class="px-3 py-1 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              3
            </button>
            <button class="px-3 py-1 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              Siguiente
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Bulk Actions -->
    <div id="bulkActions" class="hidden bg-white rounded-lg shadow p-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <span class="text-sm text-gray-700">
            <span id="selectedCount">0</span> casas seleccionadas
          </span>
          <button
            onclick="bulkUpdateStatus()"
            class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
          >
            Cambiar Estado
          </button>
          <button
            onclick="bulkUpdateTier()"
            class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
          >
            Cambiar Tier
          </button>
          <button
            onclick="bulkDelete()"
            class="inline-flex items-center px-3 py-1.5 border border-red-300 text-sm font-medium rounded text-red-700 bg-white hover:bg-red-50"
          >
            Eliminar
          </button>
        </div>
        <button
          onclick="exportSelected()"
          class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
        >
          <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Exportar Seleccionados
        </button>
      </div>
    </div>
  </div>

  <script is:inline>
    // Initialize filters
    let selectedHouses = new Set();

    // Select all checkbox
    document.getElementById('selectAll')?.addEventListener('change', (e) => {
      const checkboxes = document.querySelectorAll('.house-checkbox');
      checkboxes.forEach(cb => {
        cb.checked = e.target.checked;
        if (e.target.checked) {
          selectedHouses.add(cb.value);
        } else {
          selectedHouses.clear();
        }
      });
      updateBulkActions();
    });

    // Individual checkboxes
    document.querySelectorAll('.house-checkbox').forEach(cb => {
      cb.addEventListener('change', (e) => {
        if (e.target.checked) {
          selectedHouses.add(e.target.value);
        } else {
          selectedHouses.delete(e.target.value);
        }
        updateBulkActions();
      });
    });

    function updateBulkActions() {
      const bulkActions = document.getElementById('bulkActions');
      const selectedCount = document.getElementById('selectedCount');
      
      if (selectedHouses.size > 0) {
        bulkActions?.classList.remove('hidden');
        if (selectedCount) selectedCount.textContent = selectedHouses.size;
      } else {
        bulkActions?.classList.add('hidden');
      }
    }

    function applyFilters() {
      // Implement filter logic
      console.log('Applying filters...');
    }

    function clearFilters() {
      document.getElementById('searchInput').value = '';
      document.getElementById('providerFilter').value = '';
      document.getElementById('topologyFilter').value = '';
      document.getElementById('statusFilter').value = '';
    }

    async function deleteHouse(id) {
      if (!confirm('¿Está seguro de eliminar esta casa?')) return;
      
      try {
        const response = await fetch(`/api/admin/houses/${id}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error al eliminar la casa');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al eliminar la casa');
      }
    }

    async function duplicateHouse(id) {
      if (!confirm('¿Desea duplicar esta casa?')) return;
      
      try {
        const response = await fetch(`/api/admin/houses/${id}/duplicate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error al duplicar la casa');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al duplicar la casa');
      }
    }

    function openBulkImport() {
      // Open bulk import modal
      window.location.href = '/admin/catalog/houses/import';
    }

    async function bulkUpdateStatus() {
      const newStatus = prompt('Ingrese el nuevo estado (active, inactive, draft):');
      if (!newStatus) return;
      
      // Implement bulk status update
      console.log('Updating status for:', Array.from(selectedHouses));
    }

    async function bulkUpdateTier() {
      const newTier = prompt('Ingrese el nuevo tier (premium, destacado, standard):');
      if (!newTier) return;
      
      // Implement bulk tier update
      console.log('Updating tier for:', Array.from(selectedHouses));
    }

    async function bulkDelete() {
      if (!confirm(`¿Está seguro de eliminar ${selectedHouses.size} casas?`)) return;
      
      // Implement bulk delete
      console.log('Deleting:', Array.from(selectedHouses));
    }

    function exportSelected() {
      // Implement export functionality
      console.log('Exporting:', Array.from(selectedHouses));
    }
  </script>
</AdminLayout>