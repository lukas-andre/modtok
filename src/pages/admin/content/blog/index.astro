---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import { getAdminAuth, requireAdmin } from '../../../../lib/auth';

// Protect this page - only admins can access
const auth = await getAdminAuth(Astro);
const user = requireAdmin(auth);

if (!user) {
  return Astro.redirect('/auth/login?redirect=/admin/content/blog');
}
---

<AdminLayout title="Gestión del Blog" user={user} currentPage="/admin/content/blog">
  <div class="p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
      <div>
        <h2 class="text-2xl font-bold text-gray-900">Gestión del Blog</h2>
        <p class="text-gray-600 mt-1">Administra artículos, noticias y contenido educativo</p>
      </div>
      <div class="flex space-x-3">
        <a 
          href="/admin/content/blog/create" 
          class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
        >
          + Nueva Publicación
        </a>
      </div>
    </div>

    <!-- Filters and Stats -->
    <div class="bg-white rounded-lg border border-gray-200 mb-6">
      <div class="p-6">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600" id="total-posts">0</div>
            <div class="text-sm text-gray-600">Total de Posts</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600" id="published-posts">0</div>
            <div class="text-sm text-gray-600">Publicados</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-yellow-600" id="draft-posts">0</div>
            <div class="text-sm text-gray-600">Borradores</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-purple-600" id="scheduled-posts">0</div>
            <div class="text-sm text-gray-600">Programados</div>
          </div>
        </div>

        <!-- Filters -->
        <div class="flex flex-wrap gap-4 mb-4">
          <div>
            <select id="status-filter" class="border border-gray-300 rounded-lg px-3 py-2 text-sm">
              <option value="">Todos los Estados</option>
              <option value="published">Publicado</option>
              <option value="draft">Borrador</option>
              <option value="pending_review">Pendiente Revisión</option>
              <option value="archived">Archivado</option>
            </select>
          </div>
          <div>
            <select id="category-filter" class="border border-gray-300 rounded-lg px-3 py-2 text-sm">
              <option value="">Todas las Categorías</option>
              <option value="tendencias">Tendencias</option>
              <option value="guias">Guías</option>
              <option value="casos_exito">Casos de Éxito</option>
              <option value="noticias">Noticias</option>
              <option value="tutoriales">Tutoriales</option>
            </select>
          </div>
          <div>
            <select id="sort-by" class="border border-gray-300 rounded-lg px-3 py-2 text-sm">
              <option value="created_at">Fecha de Creación</option>
              <option value="updated_at">Fecha de Modificación</option>
              <option value="published_at">Fecha de Publicación</option>
              <option value="title">Título</option>
              <option value="views_count">Vistas</option>
              <option value="likes_count">Me Gusta</option>
            </select>
          </div>
          <div>
            <select id="sort-order" class="border border-gray-300 rounded-lg px-3 py-2 text-sm">
              <option value="desc">Descendente</option>
              <option value="asc">Ascendente</option>
            </select>
          </div>
          <div class="flex-1">
            <input
              type="text"
              id="search-input"
              placeholder="Buscar por título, contenido o etiquetas..."
              class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Bulk Actions -->
    <div class="bg-white rounded-lg border border-gray-200 mb-6" id="bulk-actions" style="display: none;">
      <div class="p-4 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-600">
              <span id="selected-count">0</span> elementos seleccionados
            </span>
            <div class="flex space-x-2">
              <button 
                onclick="bulkAction('publish')" 
                class="px-3 py-1 bg-green-100 text-green-700 rounded text-sm hover:bg-green-200 transition-colors"
              >
                Publicar
              </button>
              <button 
                onclick="bulkAction('unpublish')" 
                class="px-3 py-1 bg-yellow-100 text-yellow-700 rounded text-sm hover:bg-yellow-200 transition-colors"
              >
                Despublicar
              </button>
              <button 
                onclick="bulkAction('archive')" 
                class="px-3 py-1 bg-gray-100 text-gray-700 rounded text-sm hover:bg-gray-200 transition-colors"
              >
                Archivar
              </button>
              <button 
                onclick="bulkAction('delete')" 
                class="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
          <button onclick="clearSelection()" class="text-sm text-gray-500 hover:text-gray-700">
            Limpiar selección
          </button>
        </div>
      </div>
    </div>

    <!-- Blog Posts Table -->
    <div class="bg-white rounded-lg border border-gray-200">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left">
                <input 
                  type="checkbox" 
                  id="select-all" 
                  class="rounded border-gray-300"
                  onchange="toggleSelectAll()"
                >
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Título</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Autor</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vistas</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200" id="posts-tbody">
            <tr>
              <td colspan="8" class="px-6 py-8 text-center text-gray-500">
                Cargando publicaciones...
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Pagination -->
    <div class="flex items-center justify-between mt-6" id="pagination-container" style="display: none;">
      <div class="text-sm text-gray-700" id="pagination-info">
        Mostrando <span id="showing-from">1</span> a <span id="showing-to">20</span> de <span id="total-count">0</span> resultados
      </div>
      <div class="flex space-x-2" id="pagination-controls">
        <!-- Pagination buttons will be inserted here -->
      </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loading-indicator" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white p-6 rounded-lg shadow-lg">
        <div class="flex items-center space-x-3">
          <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
          <span class="text-gray-700">Procesando...</span>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script is:inline>
  // Blog management state
  let currentPage = 1;
  let selectedPosts = new Set();
  let allPosts = [];

  // Load posts on page load
  document.addEventListener('DOMContentLoaded', function() {
    loadPosts();
    setupEventListeners();
  });

  function setupEventListeners() {
    // Filter change listeners
    document.getElementById('status-filter').addEventListener('change', () => {
      currentPage = 1;
      loadPosts();
    });
    
    document.getElementById('category-filter').addEventListener('change', () => {
      currentPage = 1;
      loadPosts();
    });
    
    document.getElementById('sort-by').addEventListener('change', loadPosts);
    document.getElementById('sort-order').addEventListener('change', loadPosts);
    
    // Search with debounce
    let searchTimeout;
    document.getElementById('search-input').addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        currentPage = 1;
        loadPosts();
      }, 500);
    });
  }

  async function loadPosts() {
    const status = document.getElementById('status-filter').value;
    const category = document.getElementById('category-filter').value;
    const sortBy = document.getElementById('sort-by').value;
    const sortOrder = document.getElementById('sort-order').value;
    const search = document.getElementById('search-input').value;

    const params = new URLSearchParams({
      page: currentPage.toString(),
      limit: '20',
      sort_by: sortBy,
      sort_order: sortOrder
    });

    if (status) params.append('status', status);
    if (category) params.append('category', category);
    if (search) params.append('search', search);

    try {
      const response = await fetch(`/api/admin/blog?${params}`);
      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      allPosts = data.posts;
      renderPosts(data.posts);
      renderPagination(data.pagination);
      updateStats(data.posts);

    } catch (error) {
      console.error('Error loading posts:', error);
      document.getElementById('posts-tbody').innerHTML = `
        <tr>
          <td colspan="8" class="px-6 py-8 text-center text-red-500">
            Error cargando publicaciones: ${error.message}
          </td>
        </tr>
      `;
    }
  }

  function renderPosts(posts) {
    const tbody = document.getElementById('posts-tbody');
    
    if (posts.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="8" class="px-6 py-8 text-center text-gray-500">
            No se encontraron publicaciones
          </td>
        </tr>
      `;
      return;
    }

    tbody.innerHTML = posts.map(post => `
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4">
          <input 
            type="checkbox" 
            class="post-checkbox rounded border-gray-300" 
            value="${post.id}"
            onchange="togglePostSelection('${post.id}')"
          >
        </td>
        <td class="px-6 py-4">
          <div class="flex items-start">
            ${post.featured_image_url ? `
              <img src="${post.featured_image_url}" alt="" class="w-12 h-12 object-cover rounded mr-3 flex-shrink-0">
            ` : `
              <div class="w-12 h-12 bg-gray-200 rounded mr-3 flex-shrink-0 flex items-center justify-center">
                <span class="text-gray-400 text-xs">IMG</span>
              </div>
            `}
            <div class="min-w-0 flex-1">
              <div class="text-sm font-medium text-gray-900 truncate">
                ${post.title}
              </div>
              ${post.excerpt ? `
                <div class="text-xs text-gray-500 mt-1 line-clamp-2">
                  ${post.excerpt.substring(0, 100)}...
                </div>
              ` : ''}
            </div>
          </div>
        </td>
        <td class="px-6 py-4">
          ${getStatusBadge(post.status)}
        </td>
        <td class="px-6 py-4">
          ${post.category ? getCategoryBadge(post.category) : '<span class="text-gray-400 text-sm">Sin categoría</span>'}
        </td>
        <td class="px-6 py-4">
          <div class="text-sm text-gray-900">${post.author?.full_name || 'Sistema'}</div>
          <div class="text-xs text-gray-500">${post.author?.email || ''}</div>
        </td>
        <td class="px-6 py-4">
          <div class="text-sm text-gray-900">${post.views_count || 0}</div>
          <div class="text-xs text-gray-500">${post.likes_count || 0} me gusta</div>
        </td>
        <td class="px-6 py-4">
          <div class="text-sm text-gray-900">
            ${post.published_at ? formatDate(post.published_at) : formatDate(post.created_at)}
          </div>
          <div class="text-xs text-gray-500">
            ${post.published_at ? 'Publicado' : 'Creado'}
          </div>
        </td>
        <td class="px-6 py-4">
          <div class="flex space-x-2">
            <a 
              href="/admin/content/blog/${post.id}/edit" 
              class="text-blue-600 hover:text-blue-900 text-sm font-medium"
            >
              Editar
            </a>
            <button 
              onclick="quickPublish('${post.id}', '${post.status}')" 
              class="text-green-600 hover:text-green-900 text-sm font-medium"
            >
              ${post.status === 'published' ? 'Despublicar' : 'Publicar'}
            </button>
            <a 
              href="/blog/${post.slug}" 
              target="_blank"
              class="text-gray-600 hover:text-gray-900 text-sm font-medium"
            >
              Ver
            </a>
          </div>
        </td>
      </tr>
    `).join('');
  }

  function getStatusBadge(status) {
    const badges = {
      published: '<span class="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">Publicado</span>',
      draft: '<span class="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">Borrador</span>',
      pending_review: '<span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">Pendiente</span>',
      archived: '<span class="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">Archivado</span>'
    };
    return badges[status] || badges.draft;
  }

  function getCategoryBadge(category) {
    const badges = {
      tendencias: '<span class="px-2 py-1 text-xs font-medium bg-purple-100 text-purple-800 rounded">Tendencias</span>',
      guias: '<span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded">Guías</span>',
      casos_exito: '<span class="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded">Casos de Éxito</span>',
      noticias: '<span class="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded">Noticias</span>',
      tutoriales: '<span class="px-2 py-1 text-xs font-medium bg-orange-100 text-orange-800 rounded">Tutoriales</span>'
    };
    return badges[category] || `<span class="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded">${category}</span>`;
  }

  function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('es-CL', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }

  function updateStats(posts) {
    const stats = posts.reduce((acc, post) => {
      acc.total++;
      if (post.status === 'published') acc.published++;
      if (post.status === 'draft') acc.draft++;
      if (post.published_at && new Date(post.published_at) > new Date()) acc.scheduled++;
      return acc;
    }, { total: 0, published: 0, draft: 0, scheduled: 0 });

    document.getElementById('total-posts').textContent = stats.total;
    document.getElementById('published-posts').textContent = stats.published;
    document.getElementById('draft-posts').textContent = stats.draft;
    document.getElementById('scheduled-posts').textContent = stats.scheduled;
  }

  function renderPagination(pagination) {
    const container = document.getElementById('pagination-container');
    const info = document.getElementById('pagination-info');
    const controls = document.getElementById('pagination-controls');

    if (pagination.total === 0) {
      container.style.display = 'none';
      return;
    }

    container.style.display = 'flex';

    // Update info
    const from = (pagination.page - 1) * pagination.limit + 1;
    const to = Math.min(pagination.page * pagination.limit, pagination.total);
    
    document.getElementById('showing-from').textContent = from;
    document.getElementById('showing-to').textContent = to;
    document.getElementById('total-count').textContent = pagination.total;

    // Update controls
    let buttonsHTML = '';
    
    // Previous button
    buttonsHTML += `
      <button 
        onclick="changePage(${pagination.page - 1})" 
        ${!pagination.hasPrev ? 'disabled' : ''}
        class="px-3 py-2 text-sm border border-gray-300 rounded-md ${!pagination.hasPrev ? 'text-gray-400' : 'text-gray-700 hover:bg-gray-50'}"
      >
        Anterior
      </button>
    `;

    // Page numbers
    const startPage = Math.max(1, pagination.page - 2);
    const endPage = Math.min(pagination.totalPages, pagination.page + 2);

    for (let i = startPage; i <= endPage; i++) {
      buttonsHTML += `
        <button 
          onclick="changePage(${i})" 
          class="px-3 py-2 text-sm border border-gray-300 rounded-md ${i === pagination.page ? 'bg-blue-600 text-white' : 'text-gray-700 hover:bg-gray-50'}"
        >
          ${i}
        </button>
      `;
    }

    // Next button
    buttonsHTML += `
      <button 
        onclick="changePage(${pagination.page + 1})" 
        ${!pagination.hasMore ? 'disabled' : ''}
        class="px-3 py-2 text-sm border border-gray-300 rounded-md ${!pagination.hasMore ? 'text-gray-400' : 'text-gray-700 hover:bg-gray-50'}"
      >
        Siguiente
      </button>
    `;

    controls.innerHTML = buttonsHTML;
  }

  function changePage(page) {
    currentPage = page;
    loadPosts();
  }

  // Selection functions
  function toggleSelectAll() {
    const selectAll = document.getElementById('select-all');
    const checkboxes = document.querySelectorAll('.post-checkbox');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = selectAll.checked;
      if (selectAll.checked) {
        selectedPosts.add(checkbox.value);
      } else {
        selectedPosts.delete(checkbox.value);
      }
    });
    
    updateBulkActions();
  }

  function togglePostSelection(postId) {
    if (selectedPosts.has(postId)) {
      selectedPosts.delete(postId);
    } else {
      selectedPosts.add(postId);
    }
    updateBulkActions();
  }

  function updateBulkActions() {
    const bulkActions = document.getElementById('bulk-actions');
    const selectedCount = document.getElementById('selected-count');
    
    selectedCount.textContent = selectedPosts.size;
    
    if (selectedPosts.size > 0) {
      bulkActions.style.display = 'block';
    } else {
      bulkActions.style.display = 'none';
    }
  }

  function clearSelection() {
    selectedPosts.clear();
    document.getElementById('select-all').checked = false;
    document.querySelectorAll('.post-checkbox').forEach(cb => cb.checked = false);
    updateBulkActions();
  }

  // Quick actions
  async function quickPublish(postId, currentStatus) {
    const action = currentStatus === 'published' ? 'unpublish' : 'publish';
    
    try {
      showLoading(true);
      
      const response = await fetch('/api/admin/blog', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action,
          post_ids: [postId]
        })
      });

      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }

      await loadPosts();
      
    } catch (error) {
      console.error('Error:', error);
      alert('Error al cambiar el estado: ' + error.message);
    } finally {
      showLoading(false);
    }
  }

  // Bulk actions
  async function bulkAction(action) {
    if (selectedPosts.size === 0) return;
    
    const confirmation = {
      publish: '¿Publicar las publicaciones seleccionadas?',
      unpublish: '¿Despublicar las publicaciones seleccionadas?',
      archive: '¿Archivar las publicaciones seleccionadas?',
      delete: '¿Eliminar permanentemente las publicaciones seleccionadas? Esta acción no se puede deshacer.'
    };

    if (!confirm(confirmation[action])) return;

    try {
      showLoading(true);
      
      const response = await fetch('/api/admin/blog', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action,
          post_ids: Array.from(selectedPosts)
        })
      });

      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }

      clearSelection();
      await loadPosts();
      
      alert(result.message);
      
    } catch (error) {
      console.error('Error:', error);
      alert('Error en la operación: ' + error.message);
    } finally {
      showLoading(false);
    }
  }

  function showLoading(show) {
    const indicator = document.getElementById('loading-indicator');
    if (show) {
      indicator.classList.remove('hidden');
    } else {
      indicator.classList.add('hidden');
    }
  }
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>