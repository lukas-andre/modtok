---
import AdminLayout from '@/layouts/AdminLayout.astro';
import { getAdminAuth, requireAdmin } from '@/lib/auth';
import { createSupabaseClient } from '@/lib/supabase';

const auth = await getAdminAuth(Astro);
const user = requireAdmin(auth);

if (!user) {
  return Astro.redirect('/auth/login?redirect=/admin/pages/contact');
}

const supabase = createSupabaseClient(Astro);

// Fetch Contact page
const { data: contactPage } = await supabase
  .from('static_pages')
  .select('*')
  .eq('type', 'contact')
  .single();

// Fetch contact settings
const { data: contactSettings, error } = await supabase
  .from('contact_settings')
  .select('*')
  .order('display_order', { ascending: true });

if (error) {
  console.error('Error fetching contact settings:', error);
}

// Group by setting type
const settingsByType = {
  emails: contactSettings?.filter(s => s.setting_type.includes('email')) || [],
  phones: contactSettings?.filter(s => s.setting_type.includes('phone')) || [],
  address: contactSettings?.filter(s => s.setting_type === 'address') || [],
  hours: contactSettings?.filter(s => s.setting_type.includes('hours')) || [],
  social: contactSettings?.filter(s => s.setting_type.includes('social')) || []
};
---

<AdminLayout title="Configuración de Contacto" user={user}>
  <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">Configuración de Contacto</h1>
          <p class="mt-1 text-sm text-gray-500">
            Administra la información de contacto y configuraciones
          </p>
        </div>
        <div class="flex space-x-2">
          <a
            href="/admin/pages"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Volver a páginas
          </a>
          <button
            type="button"
            id="addContactBtn"
            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Agregar Contacto
          </button>
        </div>
      </div>
    </div>

    <!-- Contact Page Status -->
    {contactPage && (
      <div class="mb-6 bg-white border border-gray-200 rounded-lg p-4">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-sm font-medium text-gray-900">Estado de la página de Contacto</h3>
            <p class="text-sm text-gray-500">
              Estado: <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                contactPage.status === 'published' ? 'bg-green-100 text-green-800' :
                contactPage.status === 'draft' ? 'bg-yellow-100 text-yellow-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {contactPage.status === 'published' ? 'Publicado' :
                 contactPage.status === 'draft' ? 'Borrador' : 'Archivado'}
              </span>
            </p>
          </div>
          <a
            href={`/admin/pages/${contactPage.id}/edit`}
            class="text-blue-600 hover:text-blue-500 text-sm font-medium"
          >
            Editar página
          </a>
        </div>
      </div>
    )}

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Emails -->
      <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">📧 Emails</h2>
        </div>
        <div class="divide-y divide-gray-200">
          {settingsByType.emails.map((setting: any) => (
            <div class="px-6 py-4 flex items-center justify-between">
              <div>
                <h3 class="text-sm font-medium text-gray-900">{setting.title}</h3>
                <p class="text-sm text-gray-600">{setting.value}</p>
                <p class="text-xs text-gray-500">{setting.extra_data?.label}</p>
              </div>
              <div class="flex items-center space-x-2">
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  setting.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {setting.is_active ? 'Activo' : 'Inactivo'}
                </span>
                <button
                  type="button"
                  onclick={`editContact('${setting.id}')`}
                  class="text-blue-600 hover:text-blue-500 text-sm"
                >
                  Editar
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Phones -->
      <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">📞 Teléfonos</h2>
        </div>
        <div class="divide-y divide-gray-200">
          {settingsByType.phones.map((setting: any) => (
            <div class="px-6 py-4 flex items-center justify-between">
              <div>
                <h3 class="text-sm font-medium text-gray-900">{setting.title}</h3>
                <p class="text-sm text-gray-600">{setting.value}</p>
                <p class="text-xs text-gray-500">{setting.extra_data?.label}</p>
              </div>
              <div class="flex items-center space-x-2">
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  setting.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {setting.is_active ? 'Activo' : 'Inactivo'}
                </span>
                <button
                  type="button"
                  onclick={`editContact('${setting.id}')`}
                  class="text-blue-600 hover:text-blue-500 text-sm"
                >
                  Editar
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Address -->
      <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">📍 Dirección</h2>
        </div>
        <div class="divide-y divide-gray-200">
          {settingsByType.address.map((setting: any) => (
            <div class="px-6 py-4 flex items-center justify-between">
              <div>
                <h3 class="text-sm font-medium text-gray-900">{setting.title}</h3>
                <p class="text-sm text-gray-600">{setting.value}</p>
                <p class="text-xs text-gray-500">{setting.extra_data?.label}</p>
              </div>
              <div class="flex items-center space-x-2">
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  setting.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {setting.is_active ? 'Activo' : 'Inactivo'}
                </span>
                <button
                  type="button"
                  onclick={`editContact('${setting.id}')`}
                  class="text-blue-600 hover:text-blue-500 text-sm"
                >
                  Editar
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Hours -->
      <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">🕒 Horarios</h2>
        </div>
        <div class="divide-y divide-gray-200">
          {settingsByType.hours.map((setting: any) => (
            <div class="px-6 py-4 flex items-center justify-between">
              <div>
                <h3 class="text-sm font-medium text-gray-900">{setting.title}</h3>
                <p class="text-sm text-gray-600">{setting.value}</p>
                <p class="text-xs text-gray-500">{setting.extra_data?.label}</p>
              </div>
              <div class="flex items-center space-x-2">
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  setting.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {setting.is_active ? 'Activo' : 'Inactivo'}
                </span>
                <button
                  type="button"
                  onclick={`editContact('${setting.id}')`}
                  class="text-blue-600 hover:text-blue-500 text-sm"
                >
                  Editar
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Contact Form Settings -->
    <div class="mt-8 bg-white shadow rounded-lg">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-medium text-gray-900">⚙️ Configuración del Formulario</h2>
      </div>
      <div class="px-6 py-4">
        <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-blue-800">
                Configuración de Formulario de Contacto
              </h3>
              <div class="mt-2 text-sm text-blue-700">
                <p>
                  La configuración del formulario de contacto se gestiona desde el editor de la página.
                  Puedes personalizar los campos, validaciones y destinatarios desde allí.
                </p>
              </div>
              <div class="mt-4">
                <div class="-mx-2 -my-1.5 flex">
                  <a
                    href={contactPage ? `/admin/pages/${contactPage.id}/edit` : '/admin/pages/create?type=contact'}
                    class="bg-blue-100 px-2 py-1.5 rounded-md text-sm font-medium text-blue-800 hover:bg-blue-200"
                  >
                    Ir al editor de página
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Contact Modal -->
  <div id="contactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-1/2 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Agregar Contacto</h3>
          <button type="button" id="closeModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="contactForm" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">
                Tipo de Configuración <span class="text-red-500">*</span>
              </label>
              <select
                name="setting_type"
                id="settingTypeSelect"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="">Seleccionar tipo...</option>
                <option value="email_general">Email General</option>
                <option value="email_sales">Email Ventas</option>
                <option value="email_support">Email Soporte</option>
                <option value="phone_main">Teléfono Principal</option>
                <option value="phone_whatsapp">WhatsApp</option>
                <option value="phone_emergency">Teléfono Emergencia</option>
                <option value="address">Dirección</option>
                <option value="hours_weekday">Horario Semana</option>
                <option value="hours_weekend">Horario Fin de Semana</option>
                <option value="social_facebook">Facebook</option>
                <option value="social_instagram">Instagram</option>
                <option value="social_linkedin">LinkedIn</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">
                Etiqueta
              </label>
              <input
                type="text"
                name="label"
                id="labelInput"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                placeholder="Ej: Consultas Generales"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">
              Título <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              name="title"
              id="titleInput"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              placeholder="Ej: Email General"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">
              Valor <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              name="value"
              id="valueInput"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              placeholder="Ej: contacto@modtok.com"
            />
          </div>

          <div class="flex items-center">
            <input
              id="isActive"
              name="is_active"
              type="checkbox"
              checked
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="isActive" class="ml-2 block text-sm text-gray-900">
              Activo
            </label>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              id="cancelBtn"
              class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script is:inline>
  let isEditing = false;
  let editingId = null;

  // Modal functions
  function openModal(title = 'Agregar Contacto') {
    const modalTitle = document.getElementById('modalTitle');
    const contactModal = document.getElementById('contactModal');
    if (modalTitle) modalTitle.textContent = title;
    if (contactModal) contactModal.classList.remove('hidden');
  }

  function closeModal() {
    const contactModal = document.getElementById('contactModal');
    const contactForm = document.getElementById('contactForm');
    if (contactModal) contactModal.classList.add('hidden');
    if (contactForm) contactForm.reset();
    isEditing = false;
    editingId = null;
  }

  // Event listeners
  const addContactBtn = document.getElementById('addContactBtn');
  const closeModalBtn = document.getElementById('closeModal');
  const cancelBtn = document.getElementById('cancelBtn');

  if (addContactBtn) addContactBtn.addEventListener('click', function() { openModal(); });
  if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
  if (cancelBtn) cancelBtn.addEventListener('click', closeModal);

  // Close modal on outside click
  const contactModal = document.getElementById('contactModal');
  if (contactModal) {
    contactModal.addEventListener('click', function(e) {
      if (e.target === this) {
        closeModal();
      }
    });
  }

  // Edit contact function
  window.editContact = async function(id) {
    try {
      const response = await fetch('/api/admin/pages/contact/' + id);
      if (response.ok) {
        const result = await response.json();
        const contact = result.contact;

        // Populate form
        const settingTypeSelect = document.getElementById('settingTypeSelect');
        const labelInput = document.getElementById('labelInput');
        const titleInput = document.getElementById('titleInput');
        const valueInput = document.getElementById('valueInput');
        const isActiveInput = document.getElementById('isActive');

        if (settingTypeSelect) settingTypeSelect.value = contact.setting_type;
        if (labelInput) labelInput.value = (contact.extra_data && contact.extra_data.label) ? contact.extra_data.label : '';
        if (titleInput) titleInput.value = contact.title;
        if (valueInput) valueInput.value = contact.value;
        if (isActiveInput) isActiveInput.checked = contact.is_active;

        isEditing = true;
        editingId = id;
        openModal('Editar Contacto');
      }
    } catch (error) {
      console.error('Error loading contact:', error);
      alert('Error al cargar el contacto');
    }
  };

  // Form submission
  const contactForm = document.getElementById('contactForm');
  if (contactForm) {
    contactForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      const formData = new FormData(this);
      const data = {};

      // Convert FormData to regular object
      for (const entry of formData.entries()) {
        data[entry[0]] = entry[1];
      }

      // Build extra_data
      const extraData = {};
      if (data.label) {
        extraData.label = data.label;
      }
      data.extra_data = extraData;

    try {
      const url = isEditing ? '/api/admin/pages/contact/' + editingId : '/api/admin/pages/contact';
      const method = isEditing ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        closeModal();
        location.reload();
      } else {
        const error = await response.json();
        alert(`Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error saving contact:', error);
      alert('Error al guardar el contacto');
    }
    });
  }
</script>