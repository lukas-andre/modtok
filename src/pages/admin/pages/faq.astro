---
import AdminLayout from '@/layouts/AdminLayout.astro';
import { getAdminAuth, requireAdmin } from '@/lib/auth';
import { createSupabaseClient } from '@/lib/supabase';

const auth = await getAdminAuth(Astro);
const user = requireAdmin(auth);

if (!user) {
  return Astro.redirect('/auth/login?redirect=/admin/pages/faq');
}

const supabase = createSupabaseClient(Astro);

// Fetch FAQ page
const { data: faqPage } = await supabase
  .from('static_pages')
  .select('*')
  .eq('type', 'faq')
  .single();

// Fetch FAQ items
const { data: faqItems, error } = faqPage?.id ? await supabase
  .from('faq_items')
  .select('*')
  .eq('page_id', faqPage.id)
  .order('display_order', { ascending: true }) : { data: null, error: null };

if (error) {
  console.error('Error fetching FAQ items:', error);
}

// Group by category
const extractedCategories = faqItems?.map(item => item.category).filter(Boolean) || [];
const categories = extractedCategories.length > 0 ? [...new Set(extractedCategories)] : ['General'];
const itemsByCategory = categories.reduce((acc, category) => {
  if (category) {
    acc[category] = faqItems?.filter(item => item.category === category || (!item.category && category === 'General')) || [];
  }
  return acc;
}, {} as Record<string, any[]>);
---

<AdminLayout title="Gesti√≥n de FAQ" user={user}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">Gesti√≥n de FAQ</h1>
          <p class="mt-1 text-sm text-gray-500">
            Administra las preguntas frecuentes y sus categor√≠as
          </p>
        </div>
        <div class="flex space-x-2">
          <a
            href="/admin/pages"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Volver a p√°ginas
          </a>
          <button
            type="button"
            id="addFaqBtn"
            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Agregar FAQ
          </button>
        </div>
      </div>
    </div>

    <!-- FAQ Page Status -->
    {faqPage && (
      <div class="mb-6 bg-white border border-gray-200 rounded-lg p-4">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-sm font-medium text-gray-900">Estado de la p√°gina FAQ</h3>
            <p class="text-sm text-gray-500">
              Estado: <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                faqPage.status === 'published' ? 'bg-green-100 text-green-800' :
                faqPage.status === 'draft' ? 'bg-yellow-100 text-yellow-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {faqPage.status === 'published' ? 'Publicado' :
                 faqPage.status === 'draft' ? 'Borrador' : 'Archivado'}
              </span>
            </p>
          </div>
          <a
            href={`/admin/pages/${faqPage.id}/edit`}
            class="text-blue-600 hover:text-blue-500 text-sm font-medium"
          >
            Editar p√°gina
          </a>
        </div>
      </div>
    )}

    <!-- FAQ Items by Category -->
    <div class="space-y-8">
      {categories.map(category => category && (
        <div class="bg-white shadow rounded-lg">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h2 class="text-lg font-medium text-gray-900">
                {category === 'General' ? 'üìã General' : `üìÇ ${category}`}
              </h2>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {itemsByCategory[category].length} preguntas
              </span>
            </div>
          </div>
          <div class="divide-y divide-gray-200">
            {itemsByCategory[category].length > 0 ? (
              itemsByCategory[category].map((item: any, index: number) => (
                <div class="px-6 py-4">
                  <div class="flex items-start justify-between">
                    <div class="flex-1">
                      <div class="flex items-center mb-2">
                        <h3 class="text-sm font-medium text-gray-900 mr-3">
                          {item.question}
                        </h3>
                        {item.is_featured && (
                          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                            ‚≠ê Destacada
                          </span>
                        )}
                      </div>
                      <p class="text-sm text-gray-600 mb-3 line-clamp-3">
                        {item.answer}
                      </p>
                      <div class="flex items-center text-xs text-gray-500 space-x-4">
                        <span>üëÄ {item.views_count || 0} vistas</span>
                        <span>üëç {item.helpful_count || 0} √∫tiles</span>
                        {item.tags && item.tags.length > 0 && (
                          <span>üè∑Ô∏è {item.tags.join(', ')}</span>
                        )}
                      </div>
                    </div>
                    <div class="flex items-center space-x-2 ml-4">
                      <button
                        type="button"
                        onclick={`editFaq('${item.id}')`}
                        class="text-blue-600 hover:text-blue-500 text-sm font-medium"
                      >
                        Editar
                      </button>
                      <button
                        type="button"
                        onclick={`deleteFaq('${item.id}', '${item.question}')`}
                        class="text-red-600 hover:text-red-500 text-sm font-medium"
                      >
                        Eliminar
                      </button>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div class="px-6 py-8 text-center">
                <span class="text-4xl">‚ùì</span>
                <h3 class="mt-2 text-sm font-medium text-gray-900">Sin preguntas en esta categor√≠a</h3>
                <p class="mt-1 text-sm text-gray-500">Agrega la primera pregunta para {category?.toLowerCase() || 'esta categor√≠a'}.</p>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>

    <!-- Empty State -->
    {!faqItems || faqItems.length === 0 && (
      <div class="text-center py-12">
        <span class="text-6xl">‚ùì</span>
        <h3 class="mt-4 text-lg font-medium text-gray-900">Sin preguntas frecuentes</h3>
        <p class="mt-2 text-sm text-gray-500">
          Comienza agregando la primera pregunta frecuente.
        </p>
        <div class="mt-6">
          <button
            type="button"
            id="addFirstFaqBtn"
            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
          >
            Agregar Primera FAQ
          </button>
        </div>
      </div>
    )}
  </div>

  <!-- FAQ Modal -->
  <div id="faqModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Agregar FAQ</h3>
          <button type="button" id="closeModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="faqForm" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">
                Categor√≠a
              </label>
              <select
                name="category"
                id="categorySelect"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="General">General</option>
                <option value="Construcci√≥n">Construcci√≥n</option>
                <option value="Precios">Precios</option>
                <option value="Materiales">Materiales</option>
                <option value="Permisos">Permisos</option>
                <option value="Financiamiento">Financiamiento</option>
                <option value="Mantenimiento">Mantenimiento</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">
                Tags
              </label>
              <input
                type="text"
                name="tags"
                id="tagsInput"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                placeholder="tag1, tag2, tag3"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">
              Pregunta <span class="text-red-500">*</span>
            </label>
            <textarea
              name="question"
              id="questionInput"
              rows="2"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              placeholder="¬øCu√°l es tu pregunta?"
            ></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">
              Respuesta <span class="text-red-500">*</span>
            </label>
            <textarea
              name="answer"
              id="answerInput"
              rows="6"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              placeholder="Escribe la respuesta completa aqu√≠..."
            ></textarea>
          </div>

          <div class="flex items-center">
            <input
              id="isFeatured"
              name="is_featured"
              type="checkbox"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="isFeatured" class="ml-2 block text-sm text-gray-900">
              Marcar como pregunta destacada
            </label>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              id="cancelBtn"
              class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script define:vars={{ faqPageId: faqPage?.id }}>
  let isEditing = false;
  let editingId = null;

  // Modal functions
  function openModal(title = 'Agregar FAQ') {
    document.getElementById('modalTitle').textContent = title;
    document.getElementById('faqModal').classList.remove('hidden');
  }

  function closeModal() {
    document.getElementById('faqModal').classList.add('hidden');
    document.getElementById('faqForm').reset();
    isEditing = false;
    editingId = null;
  }

  // Event listeners
  document.getElementById('addFaqBtn')?.addEventListener('click', () => openModal());
  document.getElementById('addFirstFaqBtn')?.addEventListener('click', () => openModal());
  document.getElementById('closeModal').addEventListener('click', closeModal);
  document.getElementById('cancelBtn').addEventListener('click', closeModal);

  // Close modal on outside click
  document.getElementById('faqModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeModal();
    }
  });

  // Edit FAQ function
  window.editFaq = async function(id) {
    try {
      const response = await fetch(`/api/admin/pages/faq/${id}`);
      if (response.ok) {
        const { faq } = await response.json();

        // Populate form
        document.getElementById('categorySelect').value = faq.category || 'General';
        document.getElementById('tagsInput').value = faq.tags?.join(', ') || '';
        document.getElementById('questionInput').value = faq.question;
        document.getElementById('answerInput').value = faq.answer;
        document.getElementById('isFeatured').checked = faq.is_featured;

        isEditing = true;
        editingId = id;
        openModal('Editar FAQ');
      }
    } catch (error) {
      console.error('Error loading FAQ:', error);
      alert('Error al cargar la FAQ');
    }
  };

  // Delete FAQ function
  window.deleteFaq = async function(id, question) {
    if (confirm(`¬øEst√°s seguro de que quieres eliminar la pregunta "${question}"?`)) {
      try {
        const response = await fetch(`/api/admin/pages/faq/${id}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          location.reload();
        } else {
          alert('Error al eliminar la FAQ');
        }
      } catch (error) {
        console.error('Error deleting FAQ:', error);
        alert('Error al eliminar la FAQ');
      }
    }
  };

  // Form submission
  document.getElementById('faqForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());

    // Parse tags
    if (data.tags) {
      data.tags = data.tags.split(',').map(tag => tag.trim()).filter(tag => tag);
    }

    // Add page_id
    data.page_id = faqPageId;

    try {
      const url = isEditing ? `/api/admin/pages/faq/${editingId}` : '/api/admin/pages/faq';
      const method = isEditing ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        closeModal();
        location.reload();
      } else {
        const error = await response.json();
        alert(`Error: ${error.error}`);
      }
    } catch (error) {
      console.error('Error saving FAQ:', error);
      alert('Error al guardar la FAQ');
    }
  });
</script>