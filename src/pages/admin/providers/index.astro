---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getAdminAuth, requireAdmin } from '../../../lib/auth';
import { createSupabaseClient } from '../../../lib/supabase';
import type { Database } from '../../../lib/database.types';

// Protect this page - only admins can access
const auth = await getAdminAuth(Astro);
const user = requireAdmin(auth);

if (!user) {
  return Astro.redirect('/auth/login?redirect=/admin/providers');
}

// Get initial page parameters
const page = parseInt(Astro.url.searchParams.get('page') || '1');
const status = (Astro.url.searchParams.get('status') || '') as Database["public"]["Enums"]["listing_status"] | '';
const search = Astro.url.searchParams.get('search') || '';
const roleFilter = Astro.url.searchParams.get('role') || ''; // 'manufacturer' or 'service_provider'

// Fetch providers with pagination and filters (Provider minimalista model)
const supabase = createSupabaseClient(Astro);
let query = supabase
  .from('providers')
  .select('*', { count: 'exact' });

// Apply filters
if (status) {
  query = query.eq('status', status as Database["public"]["Enums"]["listing_status"]);
}
if (roleFilter === 'manufacturer') {
  query = query.eq('is_manufacturer', true);
}
if (roleFilter === 'service_provider') {
  query = query.eq('is_service_provider', true);
}
if (search) {
  query = query.or(`company_name.ilike.%${search}%,email.ilike.%${search}%,description.ilike.%${search}%`);
}

// Apply pagination
const limit = 20;
const offset = (page - 1) * limit;
query = query.order('created_at', { ascending: false }).range(offset, offset + limit - 1);

const { data: providers, error, count } = await query;

if (error) {
  console.error('Error fetching providers:', error);
}

// Calculate pagination info
const totalPages = Math.ceil((count || 0) / limit);
const hasNextPage = page < totalPages;
const hasPrevPage = page > 1;

// Calculate page numbers for pagination buttons
const pageNumbers = [];
const maxVisiblePages = Math.min(5, totalPages);

for (let i = 0; i < maxVisiblePages; i++) {
  let pageNum;
  if (totalPages <= 5) {
    pageNum = i + 1;
  } else if (page <= 3) {
    pageNum = i + 1;
  } else if (page >= totalPages - 2) {
    pageNum = totalPages - 4 + i;
  } else {
    pageNum = page - 2 + i;
  }
  pageNumbers.push(pageNum);
}

// Helper function to get provider roles (Provider minimalista model)
const getProviderRoles = (provider: any) => {
  const roles = [];
  if (provider.is_manufacturer) {
    roles.push({ name: 'Fabricante', color: 'bg-blue-100 text-blue-800' });
  }
  if (provider.is_service_provider) {
    roles.push({ name: 'Servicios', color: 'bg-green-100 text-green-800' });
  }
  return roles.length > 0 ? roles : [{ name: 'Sin rol', color: 'bg-gray-100 text-gray-800' }];
};
---

<AdminLayout title="Gestión de Proveedores" user={user} currentPage="/admin/providers">
  <div class="p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8">
      <div>
        <h2 class="text-2xl font-bold text-gray-900">Gestión de Proveedores</h2>
        <p class="text-gray-500 mt-1">Administra los proveedores de la plataforma MODTOK</p>
      </div>
      <a
        href="/admin/providers/create"
        class="inline-flex items-center gap-2 bg-accent-blue text-white px-4 py-2.5 rounded-lg hover:bg-accent-blue-dark hover:-translate-y-0.5 hover:shadow-apple-md transition-all duration-200 font-semibold shadow-apple-sm"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Crear Proveedor
      </a>
    </div>

    <!-- Filters & Actions -->
    <form method="GET" class="bg-white p-5 rounded-lg border border-gray-200 shadow-apple-sm mb-6">
      <div class="flex flex-wrap items-center justify-between gap-4">
        <div class="flex flex-wrap items-center gap-3">
          <div class="flex items-center gap-2">
            <label for="status" class="text-sm font-semibold text-gray-700">Estado:</label>
            <select
              name="status"
              id="status"
              class="h-9 px-3 py-2 text-sm border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-accent-blue/20 focus:border-accent-blue transition-colors"
            >
              <option value="">Todos</option>
              <option value="active" selected={status === 'active'}>Activo</option>
              <option value="pending_review" selected={status === 'pending_review'}>Pendiente</option>
              <option value="inactive" selected={status === 'inactive'}>Inactivo</option>
              <option value="rejected" selected={status === 'rejected'}>Rechazado</option>
            </select>
          </div>

          <div class="flex items-center gap-2">
            <label for="role" class="text-sm font-semibold text-gray-700">Rol:</label>
            <select
              name="role"
              id="role"
              class="h-9 px-3 py-2 text-sm border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-accent-blue/20 focus:border-accent-blue transition-colors"
            >
              <option value="">Todos</option>
              <option value="manufacturer" selected={roleFilter === 'manufacturer'}>Fabricantes</option>
              <option value="service_provider" selected={roleFilter === 'service_provider'}>Servicios</option>
            </select>
          </div>

          <div class="flex items-center gap-2">
            <input
              type="text"
              name="search"
              id="search"
              placeholder="Buscar por nombre o email..."
              class="h-9 w-64 px-4 py-2 text-sm border border-gray-300 rounded-lg bg-white placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-accent-blue/20 focus:border-accent-blue transition-colors"
              value={search}
            />
          </div>

          <button
            type="submit"
            class="inline-flex items-center gap-2 h-9 px-4 py-2 text-sm bg-accent-blue text-white rounded-lg hover:bg-accent-blue-dark transition-colors font-semibold shadow-apple-sm"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
            </svg>
            Filtrar
          </button>

          {(status || roleFilter || search) && (
            <a
              href="/admin/providers"
              class="inline-flex items-center gap-1 h-9 px-4 py-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors font-medium"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Limpiar
            </a>
          )}
        </div>

        <!-- Bulk Actions -->
        <div class="flex items-center gap-2">
          <select
            id="bulk_action"
            class="h-9 px-3 py-2 text-sm border border-gray-300 rounded-lg bg-white disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-accent-blue/20 focus:border-accent-blue"
            disabled
          >
            <option value="">Acciones en lote...</option>
            <option value="approve">Aprobar seleccionados</option>
            <option value="reject">Rechazar seleccionados</option>
            <option value="delete">Eliminar seleccionados</option>
          </select>
          <button
            type="button"
            id="apply_bulk"
            class="h-9 px-4 py-2 text-sm bg-brand-green text-white rounded-lg hover:bg-brand-green-dark transition-colors font-semibold disabled:opacity-50 disabled:cursor-not-allowed shadow-apple-sm"
            disabled
          >
            Aplicar
          </button>
        </div>
      </div>
    </form>

    <!-- Providers List -->
    <div class="bg-white rounded-lg border border-gray-200 shadow-apple-sm overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-bold text-gray-900">Lista de Proveedores</h3>
          <span class="text-sm font-medium text-gray-600">
            {providers ? `${providers.length} de ${count || 0} proveedores` : 'Cargando...'}
          </span>
        </div>
      </div>
      
      {!providers || providers.length === 0 ? (
        <div class="p-8 text-center">
          <div class="text-gray-400 mb-4">
            <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H9m0 0H5m4 0v-5a1 1 0 011-1h4a1 1 0 011 1v5m-4-5V9a1 1 0 011-1h2a1 1 0 011 1v4.01" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No hay proveedores</h3>
          <p class="text-gray-600 mb-4">Crea el primer proveedor de la plataforma.</p>
          <a 
            href="/admin/providers/create"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
          >
            Crear Proveedor
          </a>
        </div>
      ) : (
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left">
                  <input
                    type="checkbox"
                    id="select_all"
                    class="rounded border-gray-300 text-blue-600 shadow-sm focus:ring-blue-500"
                    onchange="toggleSelectAll(this)"
                  />
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Proveedor
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Rol
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Contacto
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {providers.map((provider) => (
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <input
                      type="checkbox"
                      class="provider-checkbox rounded border-gray-300 text-blue-600 shadow-sm focus:ring-blue-500"
                      value={provider.id}
                      onchange="updateBulkActions()"
                    />
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-12 w-12">
                        {provider.logo_url ? (
                          <img class="h-12 w-12 rounded-lg object-cover" src={provider.logo_url} alt="" />
                        ) : (
                          <div class="h-12 w-12 rounded-lg bg-gray-300 flex items-center justify-center">
                            <span class="text-sm font-medium text-gray-700">
                              {provider.company_name?.charAt(0)?.toUpperCase() || '?'}
                            </span>
                          </div>
                        )}
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">
                          <a href={`/admin/providers/${provider.id}`} class="hover:text-blue-600">
                            {provider.company_name}
                          </a>
                        </div>
                        <div class="text-sm text-gray-500">
                          {provider.slug}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4">
                    <div class="flex flex-wrap gap-1">
                      {getProviderRoles(provider).map((role) => (
                        <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${role.color}`}>
                          {role.name}
                        </span>
                      ))}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">{provider.email}</div>
                    {provider.phone && <div class="text-sm text-gray-500">{provider.phone}</div>}
                    {provider.city && <div class="text-sm text-gray-500">{provider.city}</div>}
                    {provider.hq_region_code && <div class="text-xs text-gray-400">{provider.hq_region_code}</div>}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      provider.status === 'active' 
                        ? 'bg-green-100 text-green-800' 
                        : provider.status === 'pending_review'
                        ? 'bg-yellow-100 text-yellow-800'
                        : provider.status === 'inactive'
                        ? 'bg-gray-100 text-gray-800'
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {provider.status === 'active' ? 'Activo' : 
                       provider.status === 'pending_review' ? 'Pendiente' : 
                       provider.status === 'inactive' ? 'Inactivo' : 
                       provider.status === 'rejected' ? 'Rechazado' : 'Borrador'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex space-x-2">
                      <a 
                        href={`/admin/providers/${provider.id}`}
                        class="text-blue-600 hover:text-blue-900"
                      >
                        Ver
                      </a>
                      <a 
                        href={`/admin/providers/${provider.id}/edit`}
                        class="text-indigo-600 hover:text-indigo-900"
                      >
                        Editar
                      </a>
                      {provider.status === 'pending_review' && (
                        <button 
                          onclick={`quickApprove('${provider.id}')`}
                          class="text-green-600 hover:text-green-900"
                        >
                          Aprobar
                        </button>
                      )}
                      {user.role === 'super_admin' && (
                        <button 
                          onclick={`deleteProvider('${provider.id}', '${provider.company_name}')`}
                          class="text-red-600 hover:text-red-900"
                        >
                          Eliminar
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}  
    </div>
    
    <!-- Pagination -->
    {totalPages > 1 && (
      <div class="mt-6 flex items-center justify-between">
        <div class="text-sm text-gray-700">
          Mostrando página {page} de {totalPages} ({count || 0} proveedores total)
        </div>
        <div class="flex space-x-2">
          {hasPrevPage && (
            <a
              href={`?page=${page - 1}${status ? `&status=${status}` : ''}${roleFilter ? `&role=${roleFilter}` : ''}${search ? `&search=${search}` : ''}`}
              class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50"
            >
              Anterior
            </a>
          )}

{pageNumbers.map((pageNum) => (
            <a
              href={`?page=${pageNum}${status ? `&status=${status}` : ''}${roleFilter ? `&role=${roleFilter}` : ''}${search ? `&search=${search}` : ''}`}
              class={`px-3 py-1 text-sm rounded ${
                pageNum === page
                  ? 'bg-blue-600 text-white'
                  : 'bg-white border border-gray-300 hover:bg-gray-50'
              }`}
            >
              {pageNum}
            </a>
          ))}

          {hasNextPage && (
            <a
              href={`?page=${page + 1}${status ? `&status=${status}` : ''}${roleFilter ? `&role=${roleFilter}` : ''}${search ? `&search=${search}` : ''}`}
              class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50"
            >
              Siguiente
            </a>
          )}
        </div>
      </div>
    )}
  </div>
</AdminLayout>

<script>
  async function quickApprove(providerId: string): Promise<void> {
    if (!confirm('¿Confirmas que deseas aprobar este proveedor?')) return;

    try {
      const response = await fetch('/api/admin/providers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'approve',
          provider_ids: [providerId]
        })
      });

      const result = await response.json();
      if (result.success) {
        location.reload();
      } else {
        alert('Error al aprobar proveedor: ' + result.message);
      }
    } catch (error) {
      alert('Error de conexión al aprobar proveedor');
    }
  }

  async function deleteProvider(providerId: string, providerName: string): Promise<void> {
    if (!confirm(`¿Estás seguro que deseas eliminar al proveedor "${providerName}"? Esta acción no se puede deshacer.`)) return;

    try {
      const response = await fetch(`/api/admin/providers/${providerId}`, {
        method: 'DELETE'
      });

      const result = await response.json();
      if (result.success) {
        location.reload();
      } else {
        alert('Error al eliminar proveedor: ' + result.error);
      }
    } catch (error) {
      alert('Error de conexión al eliminar proveedor');
    }
  }

  function toggleSelectAll(checkbox: HTMLInputElement): void {
    const providerCheckboxes = document.querySelectorAll('.provider-checkbox') as NodeListOf<HTMLInputElement>;
    providerCheckboxes.forEach(cb => {
      cb.checked = checkbox.checked;
    });
    updateBulkActions();
  }

  function updateBulkActions(): void {
    const checkedBoxes = document.querySelectorAll('.provider-checkbox:checked');
    const bulkAction = document.getElementById('bulk_action') as HTMLSelectElement;
    const applyButton = document.getElementById('apply_bulk') as HTMLButtonElement;
    
    const hasSelection = checkedBoxes.length > 0;
    bulkAction.disabled = !hasSelection;
    applyButton.disabled = !hasSelection;
  }

  async function applyBulkAction(): Promise<void> {
    const checkedBoxes = document.querySelectorAll('.provider-checkbox:checked') as NodeListOf<HTMLInputElement>;
    const bulkAction = document.getElementById('bulk_action') as HTMLSelectElement;
    
    if (checkedBoxes.length === 0 || !bulkAction.value) {
      alert('Selecciona proveedores y una acción');
      return;
    }

    const providerIds = Array.from(checkedBoxes).map(cb => cb.value);
    const action = bulkAction.value;
    
    let confirmMessage = `¿Confirmas aplicar "${bulkAction.selectedOptions[0].textContent}" a ${providerIds.length} proveedores?`;
    if (!confirm(confirmMessage)) return;

    try {
      const response = await fetch('/api/admin/providers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: action,
          provider_ids: providerIds
        })
      });

      const result = await response.json();
      if (result.success) {
        location.reload();
      } else {
        alert('Error en operación en lote: ' + result.message);
      }
    } catch (error) {
      alert('Error de conexión en operación en lote');
    }
  }

  // Setup bulk actions
  document.addEventListener('DOMContentLoaded', function() {
    const applyButton = document.getElementById('apply_bulk');
    if (applyButton) {
      applyButton.addEventListener('click', applyBulkAction);
    }
  });

  // Make functions global so they can be called from onclick attributes
  (window as any).quickApprove = quickApprove;
  (window as any).deleteProvider = deleteProvider;
  (window as any).toggleSelectAll = toggleSelectAll;
  (window as any).updateBulkActions = updateBulkActions;
</script>
