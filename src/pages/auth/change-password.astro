---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getUser } from '@/lib/supabase';

const user = await getUser(Astro);

if (!user) {
  return Astro.redirect('/auth/login');
}

// Check if password change is forced (from URL params)
const forceChange = Astro.url.searchParams.get('force') === 'true';
const redirect = Astro.url.searchParams.get('redirect') || '/dashboard';
---

<BaseLayout
  title="Cambiar Contraseña - MODTOK"
  description="Cambia tu contraseña de acceso a MODTOK"
>
  <div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
    <div class="w-full max-w-md">
      <div class="text-center">
        <h1 class="text-3xl font-bold tracking-tight text-gray-900">MODTOK</h1>
        <h2 class="mt-6 text-2xl font-semibold text-gray-900">
          {forceChange ? 'Cambio de Contraseña Obligatorio' : 'Cambiar Contraseña'}
        </h2>
        {forceChange && (
          <p class="mt-2 text-sm text-amber-600">
            Debes cambiar tu contraseña temporal antes de continuar
          </p>
        )}
      </div>

      <div class="mt-8">
        <!-- Success/Error Messages -->
        <div id="successMessage" class="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg hidden">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-green-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            <p class="text-green-800 font-medium">Contraseña cambiada exitosamente</p>
          </div>
        </div>

        <div id="errorMessage" class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg hidden">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
            <p class="text-red-800 font-medium" id="errorText"></p>
          </div>
        </div>

        <form id="changePasswordForm" class="space-y-6">
          <div>
            <label for="currentPassword" class="block text-sm font-medium text-gray-700 mb-2">
              Contraseña Actual *
            </label>
            <input
              type="password"
              id="currentPassword"
              name="currentPassword"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Ingresa tu contraseña actual"
            />
          </div>

          <div>
            <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-2">
              Nueva Contraseña *
            </label>
            <input
              type="password"
              id="newPassword"
              name="newPassword"
              required
              minlength="8"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Mínimo 8 caracteres"
            />
            <div class="mt-2 text-sm text-gray-600">
              <p>La contraseña debe tener al menos:</p>
              <ul class="list-disc list-inside text-xs mt-1 space-y-1">
                <li>8 caracteres de longitud</li>
                <li>Una letra minúscula</li>
                <li>Una letra mayúscula</li>
                <li>Un número</li>
              </ul>
            </div>
          </div>

          <div>
            <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-2">
              Confirmar Nueva Contraseña *
            </label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              required
              minlength="8"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Confirma tu nueva contraseña"
            />
          </div>

          <button
            type="submit"
            class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Cambiar Contraseña
          </button>

          {!forceChange && (
            <div class="text-center">
              <a
                href={redirect}
                class="text-sm text-gray-600 hover:text-gray-900"
              >
                Cancelar
              </a>
            </div>
          )}
        </form>
      </div>
    </div>
  </div>
</BaseLayout>

<script is:inline define:vars={{ redirect, forceChange }}>
  function validatePassword(password) {
    const minLength = password.length >= 8;
    const hasLower = /[a-z]/.test(password);
    const hasUpper = /[A-Z]/.test(password);
    const hasNumber = /\d/.test(password);
    
    return {
      valid: minLength && hasLower && hasUpper && hasNumber,
      errors: {
        minLength: !minLength ? 'La contraseña debe tener al menos 8 caracteres' : null,
        hasLower: !hasLower ? 'Debe contener al menos una letra minúscula' : null,
        hasUpper: !hasUpper ? 'Debe contener al menos una letra mayúscula' : null,
        hasNumber: !hasNumber ? 'Debe contener al menos un número' : null,
      }
    };
  }

  function showMessage(type, message) {
    const successDiv = document.getElementById('successMessage');
    const errorDiv = document.getElementById('errorMessage');
    
    if (type === 'success') {
      successDiv.classList.remove('hidden');
      errorDiv.classList.add('hidden');
    } else {
      errorDiv.classList.remove('hidden');
      successDiv.classList.add('hidden');
      document.getElementById('errorText').textContent = message;
    }
  }

  function hideMessages() {
    document.getElementById('successMessage').classList.add('hidden');
    document.getElementById('errorMessage').classList.add('hidden');
  }

  // Handle form submission
  document.getElementById('changePasswordForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideMessages();

    const formData = new FormData(e.target);
    const currentPassword = formData.get('currentPassword');
    const newPassword = formData.get('newPassword');
    const confirmPassword = formData.get('confirmPassword');

    // Validate passwords match
    if (newPassword !== confirmPassword) {
      showMessage('error', 'Las contraseñas no coinciden');
      return;
    }

    // Validate password strength
    const validation = validatePassword(newPassword);
    if (!validation.valid) {
      const errors = Object.values(validation.errors).filter(Boolean);
      showMessage('error', errors[0]);
      return;
    }

    const submitButton = e.target.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    
    submitButton.disabled = true;
    submitButton.textContent = 'Cambiando...';

    try {
      const response = await fetch('/api/auth/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          currentPassword,
          newPassword
        })
      });

      const data = await response.json();

      if (response.ok) {
        showMessage('success');
        
        // Update profile to mark password as changed if it was forced
        if (forceChange) {
          await fetch('/api/auth/mark-password-changed', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });
        }
        
        // Redirect after success
        setTimeout(() => {
          window.location.href = redirect;
        }, 2000);
      } else {
        showMessage('error', data.error || 'Error al cambiar contraseña');
      }
    } catch (error) {
      showMessage('error', 'Error de conexión. Inténtalo de nuevo.');
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = originalText;
    }
  });

  // Real-time password validation feedback
  document.getElementById('newPassword').addEventListener('input', (e) => {
    const password = e.target.value;
    const validation = validatePassword(password);
    
    // Update visual feedback (you could add indicators here)
    if (password.length > 0 && !validation.valid) {
      e.target.style.borderColor = '#ef4444';
    } else if (validation.valid) {
      e.target.style.borderColor = '#10b981';
    } else {
      e.target.style.borderColor = '#d1d5db';
    }
  });
</script>